"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.array.sort.js");

require("regenerator-runtime/runtime.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newSemanticTokenProvider = void 0;

var languageModes_1 = require("./languageModes");

var positions_1 = require("../utils/positions");

function newSemanticTokenProvider(languageModes) {
  // combined legend across modes
  var legend = {
    types: [],
    modifiers: []
  };
  var legendMappings = {};

  var _iterator = _createForOfIteratorHelper(languageModes.getAllModes()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var mode = _step.value;

      if (mode.getSemanticTokenLegend && mode.getSemanticTokens) {
        var modeLegend = mode.getSemanticTokenLegend();
        legendMappings[mode.getId()] = {
          types: createMapping(modeLegend.types, legend.types),
          modifiers: createMapping(modeLegend.modifiers, legend.modifiers)
        };
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    legend: legend,
    getSemanticTokens: function getSemanticTokens(document, ranges) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var allTokens, _iterator2, _step2, mode, mapping, tokens, _iterator3, _step3, token;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                allTokens = [];
                _iterator2 = _createForOfIteratorHelper(languageModes.getAllModesInDocument(document));
                _context.prev = 2;

                _iterator2.s();

              case 4:
                if ((_step2 = _iterator2.n()).done) {
                  _context.next = 17;
                  break;
                }

                mode = _step2.value;

                if (!mode.getSemanticTokens) {
                  _context.next = 15;
                  break;
                }

                mapping = legendMappings[mode.getId()];
                _context.next = 10;
                return mode.getSemanticTokens(document);

              case 10:
                tokens = _context.sent;
                applyTypesMapping(tokens, mapping.types);
                applyModifiersMapping(tokens, mapping.modifiers);
                _iterator3 = _createForOfIteratorHelper(tokens);

                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    token = _step3.value;
                    allTokens.push(token);
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }

              case 15:
                _context.next = 4;
                break;

              case 17:
                _context.next = 22;
                break;

              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](2);

                _iterator2.e(_context.t0);

              case 22:
                _context.prev = 22;

                _iterator2.f();

                return _context.finish(22);

              case 25:
                return _context.abrupt("return", encodeTokens(allTokens, ranges, document));

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 19, 22, 25]]);
      }))();
    }
  };
}

exports.newSemanticTokenProvider = newSemanticTokenProvider;

function createMapping(origLegend, newLegend) {
  var mapping = [];
  var needsMapping = false;

  for (var origIndex = 0; origIndex < origLegend.length; origIndex++) {
    var entry = origLegend[origIndex];
    var newIndex = newLegend.indexOf(entry);

    if (newIndex === -1) {
      newIndex = newLegend.length;
      newLegend.push(entry);
    }

    mapping.push(newIndex);
    needsMapping = needsMapping || newIndex !== origIndex;
  }

  return needsMapping ? mapping : undefined;
}

function applyTypesMapping(tokens, typesMapping) {
  if (typesMapping) {
    var _iterator4 = _createForOfIteratorHelper(tokens),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var token = _step4.value;
        token.typeIdx = typesMapping[token.typeIdx];
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }
}

function applyModifiersMapping(tokens, modifiersMapping) {
  if (modifiersMapping) {
    var _iterator5 = _createForOfIteratorHelper(tokens),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var token = _step5.value;
        var modifierSet = token.modifierSet;

        if (modifierSet) {
          var index = 0;
          var result = 0;

          while (modifierSet > 0) {
            if ((modifierSet & 1) !== 0) {
              result = result + (1 << modifiersMapping[index]);
            }

            index++;
            modifierSet = modifierSet >> 1;
          }

          token.modifierSet = result;
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
}

function encodeTokens(tokens, ranges, document) {
  var resultTokens = tokens.sort(function (d1, d2) {
    return d1.start.line - d2.start.line || d1.start.character - d2.start.character;
  });

  if (ranges) {
    ranges = ranges.sort(function (d1, d2) {
      return d1.start.line - d2.start.line || d1.start.character - d2.start.character;
    });
  } else {
    ranges = [languageModes_1.Range.create(languageModes_1.Position.create(0, 0), languageModes_1.Position.create(document.lineCount, 0))];
  }

  var rangeIndex = 0;
  var currRange = ranges[rangeIndex++];
  var prefLine = 0;
  var prevChar = 0;
  var encodedResult = [];

  for (var k = 0; k < resultTokens.length && currRange; k++) {
    var curr = resultTokens[k];
    var start = curr.start;

    while (currRange && (0, positions_1.beforeOrSame)(currRange.end, start)) {
      currRange = ranges[rangeIndex++];
    }

    if (currRange && (0, positions_1.beforeOrSame)(currRange.start, start) && (0, positions_1.beforeOrSame)({
      line: start.line,
      character: start.character + curr.length
    }, currRange.end)) {
      // token inside a range
      if (prefLine !== start.line) {
        prevChar = 0;
      }

      encodedResult.push(start.line - prefLine); // line delta

      encodedResult.push(start.character - prevChar); // line delta

      encodedResult.push(curr.length); // length

      encodedResult.push(curr.typeIdx); // tokenType

      encodedResult.push(curr.modifierSet); // tokenModifier

      prefLine = start.line;
      prevChar = start.character;
    }
  }

  return encodedResult;
}