"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Limiter = void 0;
/**
 * A helper to queue N promises and run them all with a max degree of parallelism. The helper
 * ensures that at any time no more than M promises are running at the same time.
 *
 * Taken from 'src/vs/base/common/async.ts'
 */
class Limiter {
    #size = 0;
    #runningPromises;
    #maxDegreeOfParalellism;
    #outstandingPromises;
    constructor(maxDegreeOfParalellism) {
        this.#maxDegreeOfParalellism = maxDegreeOfParalellism;
        this.#outstandingPromises = [];
        this.#runningPromises = 0;
    }
    get size() {
        return this.#size;
    }
    queue(factory) {
        this.#size++;
        return new Promise((c, e) => {
            this.#outstandingPromises.push({ factory, c, e });
            this.#consume();
        });
    }
    #consume() {
        while (this.#outstandingPromises.length && this.#runningPromises < this.#maxDegreeOfParalellism) {
            const iLimitedTask = this.#outstandingPromises.shift();
            this.#runningPromises++;
            const promise = iLimitedTask.factory();
            promise.then(iLimitedTask.c, iLimitedTask.e);
            promise.then(() => this.#consumed(), () => this.#consumed());
        }
    }
    #consumed() {
        this.#size--;
        this.#runningPromises--;
        if (this.#outstandingPromises.length > 0) {
            this.#consume();
        }
    }
}
exports.Limiter = Limiter;
//# sourceMappingURL=limiter.js.map