
mpd_music_dir = "/home/gaffclant/Music"




###############################################################
#
##### directories ######
##
## Directory for storing ncmpcpp related files.
## Changing it is useful if you want to store
## everything somewhere else and provide command
## line setting for alternative location to config
## file which defines that while launching ncmpcpp.
##
#
ncmpcpp_directory  = ~/.ncmpcpp

## Directory for storing downloaded lyrics. It
## defaults to ~/.lyrics since other MPD clients
## (eg. ncmpc) also use that location.
##
#
lyrics_directory  = ~/.ncmpcpp/lyrics

##### connection settings #####
mpd_host = "localhost"

mpd_port = "6600"

mpd_connection_timeout = 5
## Needed for tag editor and file operations to work.
mpd_crossfade_time = 5



## Note: In order to make music visualizer work you'll
## need to use mpd fifo output, whose format parameter
## has to be set to 44100:16:1 for mono visualization
## or 44100:16:2 for stereo visualization. Example
## configuration (it has to be put into mpd.conf):
##
audio_output {
        type            "my_fifo"
        name            "Visualizer feed"
        path            "/tmp/mpd.fifo"
        format          "44100:16:2"
## }
##
#
visualizer_fifo_path = "/tmp/mpd.fifo"

#
##
## Note: Below parameter is needed for ncmpcpp
## to determine which output provides data for 
## visualizer and thus allow syncing between
## visualization and sound as currently there
## are some problems with it. 
##
#

visualizer_output_name = "my_fifo"

##
## Note: Below parameter defines how often ncmpcpp
## has to "synchronize" visualizer and audio outputs.
## 30 seconds is optimal value, but if you experience
## synchronization problems, set it to lower value.
## Keep in mind that sane values start with >=10.
##
#

visualizer_sync_interval = "12"

#
##
## Note: To enable spectrum frequency visualization
## you need to compile ncmpcpp with fftw3 support.
##
#
## Available values: spectrum, wave, wave_filled, ellipse.
##

visualizer_type = "spectrum" (spectrum/wave)

visualizer_look = "●┃"
#visualizer_look = "+|"

#
# visualizer_color = blue, cyan, green, yellow, magenta, red
#
## Alternative subset of 256 colors for terminals that support it.
##
# visualizer_color = 41, 83, 119, 155, 185, 215, 209, 203, 197, 161
#

#
##
## If you set format to 44100:16:2, make it 'yes'.
##

visualizer_in_stereo = "yes"

##### system encoding #####
##
## ncmpcpp should detect your charset encoding
## but if it failed to do so, you can specify
## charset encoding you are using here.
##
## Note: You can see whether your ncmpcpp build
## supports charset detection by checking output
## of `ncmpcpp --version`.
##
## Note: Since MPD uses UTF-8 by default, setting
## this option makes sense only if your encoding
## is different.
##
#
system_encoding = "utf-8"

##### delays #####
#
## Time of inactivity (in seconds) after playlist
## highlighting will be disabled (0 = always on).
##
playlist_disable_highlight_delay = "0"
#
## Defines how long messages are supposed to be visible.
##
message_delay_time = 5

##### song format #####
##
## For a song format you can use:
##
## %l - length
## %f - filename
## %D - directory
## %a - artist
## %A - album artist
## %t - title
## %b - album
## %y - date
## %n - track number (01/12 -> 01)
## %N - full track info (01/12 -> 01/12)
## %g - genre
## %c - composer
## %p - performer
## %d - disc
## %C - comment
## %P - priority
## $R - begin right alignment
##
## If you want to make sure that a part of the format is displayed
## only when certain tags are present, you can archieve it by
## grouping them with brackets, e.g. '{%a - %t}' will be evaluated
## to 'ARTIST - TITLE' if both tags are present or '' otherwise.
## It is also possible to define a list of alternatives by providing
## several groups and separating them with '|', e.g. '{%t}|{%f}'
## will be evaluated to 'TITLE' or 'FILENAME' if the former is not
## present.
##
## Note: If you want to set limit on maximal length of a tag, just
## put the appropriate number between % and character that defines
## tag type, e.g. to make album take max. 20 terminal cells, use '%20b'.
##
## In addition, formats support markers used for text attributes.
## They are followed by character '$'. After that you can put:
##
## - 0 - default window color (discards all other colors)
## - 1 - black
## - 2 - red
## - 3 - green
## - 4 - yellow
## - 5 - blue
## - 6 - magenta
## - 7 - cyan
## - 8 - white
## - 9 - end of current color
## - b - bold text
## - u - underline text
## - r - reverse colors
## - a - use alternative character set
##
## If you don't want to use a non-color attribute anymore, just put it
## again, but this time insert character '/' between '$' and attribute
## character, e.g. {$b%t$/b}|{$r%f$/r} will display bolded title tag
## or filename with reversed colors.
##
## If you want to use 256 colors and/or background colors in formats
## (the naming scheme is described below in section about color
## definitions), it can be done with the syntax $(COLOR), e.g. to set
## the artist tag to one of the non-standard colors and make it have
## yellow background, you need to write $(197_yellow)%a$(end). Note
## that for standard colors this is interchangable with attributes
## listed above.
##
## Note: colors can be nested.
##
#

#song_list_format = "{$3%n │ $9}{$7%a - $9}{$5%t$9}|{$8%f$9}$R{$6 │ %b$9}{$3 │ %l$9}"

#song_list_format = {%a - }{%t}|{$8%f$9}$R{$5(%l)$9}

#song_status_format ="{{%a{ $2//$9 %b{, %y}} $2//$9 }{%t$/b}}|{$b%f$/b}"

#song_status_format = " $2%a $4⟫$3⟫ $8%t $4⟫$3⟫ $5%b "

#song_list_format = " $8%a • %t"
#song_status_format = " $6%a  $7%t  $5%b "


#song_library_format = {%n - }{%t}|{%f}

#alternative_header_first_line_format = "$0$aqqu$/a {$7%a - $9}{$5%t$9}|{$8%f$9} $0$atqq$/a$9"

#alternative_header_second_line_format = "{{$6%b$9}{ [$6%y$9]}}|{%D}"

#now_playing_prefix = "$b$9▶ "

now_playing_suffix = $/b

selected_item_prefix = "* "

#selected_item_prefix = $6
#
#selected_item_suffix = $9
#
#modified_item_prefix = $3> $9

##
## Note: Below variables are used for sorting songs in browser.
## The sort mode determines how songs are sorted, and can be used
## in combination with a sort format to specify a custom sorting format.
## Available values for browser_sort_mode are "name", "mtime", "format"
## and "noop".
##
#
browser_sort_mode = name
#
browser_sort_format = {%a - }{%t}|{%f} {(%l)}
#

##### columns settings #####
##
## syntax of song columns list format is "column column etc."
##
## - syntax for each column is:
##
## (width of the column)[color of the column]{displayed tag}
##
## Note: Width is by default in %, if you want a column to
## have fixed size, add 'f' after the value, e.g. (10)[white]{a}
## will be the column that take 10% of screen (so the real width
## will depend on actual screen size), whereas (10f)[white]{a}
## will take 10 terminal cells, no matter how wide the screen is.
##
## - color is optional (if you want the default one,
##   leave the field empty).
##
## Note: You can give a column additional attributes by putting appropriate
## character after displayed tag character. Available attributes are:
##
## - r - column will be right aligned
## - E - if tag is empty, empty tag marker won't be displayed
##
## You can also:
##
## - give a column custom name by putting it after attributes,
##   separated with character ':', e.g. {lr:Length} gives you
##   right aligned column of lengths named "Length".
##
## - define sequence of tags, that have to be displayed in case
##   predecessor is empty in a way similar to the one in classic
##   song format, i.e. using '|' character, e.g. {a|c|p:Owner}
##   creates column named "Owner" that tries to display artist
##   tag and then composer and performer if previous ones are
##   not available.
##

#song_columns_list_format = "(3)[]{}(85)[white]{t} (1)[blue]{a}"

song_columns_list_format = "(10)[blue]{l} (30)[green]{b} (25)[magenta]{a} (10)[yellow]{t}"

#song_columns_list_format = "(15)[green]{a} (20)[magenta]{b} (25)[yellow]{t} (5)[blue]{l}"  

##### various settings #####
#
##
## Note: Custom command that will be executed each
## time song changes. Useful for notifications etc.
##
execute_on_song_change = notify-send "Now Playing ♫" "$(mpc current)"

# Playlist

#playlist_show_mpd_host = no
 
#
#playlist_shorten_total_times = no
#
#playlist_separate_albums = no



##
## Note: Possible display modes: classic, columns.
##

 playlist_display_mode = "columns"  

 browser_display_mode = "columns"  

#search_engine_display_mode = columns

#playlist_editor_display_mode = columns

 playlist_disable_highlight_delay = "0"  

 playlist_show_remaining_time = "yes"

## Selected tracks ##
discard_colors_if_item_is_selected = "no"

## Seeking ##
incremental_seeking = "yes"
seek_time = "1"

#volume_change_step = 2

autocenter_mode = yes

centered_cursor = yes

## Note: You can specify third character which will
## be used to build 'empty' part of progressbar.
##
#progressbar_look = "◾◾◽"
#progressbar_look = "=>"
#progressbar_look = "─- "
progressbar_look = "▒▒░"
#progressbar_look = "┅┅┄"
#progressbar_look = "─⊙┄"
#progressbar_look = "─➞─"
#progressbar_look = "─┅─"
#progressbar_look = "▪▪▪"
#progressbar_look = "▪▪▫"
#progressbar_look = "───"
#progressbar_look = "▁▁▁"
#progressbar_look =  "=>-"
#progressbar_look = "‒‒‒"
#progressbar_look = "■◣ "
#progressbar_look = "◈◆◇"
#progressbar_look = "─╼ "
#
#progressbar_boldness = yes
#
## Available values: database, playlist.
##
#default_place_to_search_in = database
#
## Available values: classic, alternative.
##

user_interface = "alternative"

#user_interface = "classic"

#
#data_fetching_delay = yes
#
## Available values: artist, album_artist, date, genre, composer, performer.
##
#media_library_primary_tag = artist
#
## Available values: wrapped, normal.
##
#default_find_mode = wrapped
#
#default_tag_editor_pattern = %n - %t
#
header_visibility = no
#
statusbar_visibility = yes
#
titles_visibility = yes
#
header_text_scrolling = yes
#
#
#follow_now_playing_lyrics = no
#
fetch_lyrics_for_current_song_in_background = yes
#
#store_lyrics_in_song_dir = no
#
#generate_win32_compatible_filenames = yes
#
#allow_for_physical_item_deletion = no

##
## Note: If you set this variable, ncmpcpp will try to
## get info from last.fm in language you set and if it
## fails, it will fall back to english. Otherwise it will
## use english the first time.
##
## Note: Language has to be expressed as an ISO 639 alpha-2 code.
##
#lastfm_preferred_language = en
#
#show_hidden_files_in_local_browser = no
#
##
## How shall screen switcher work?
##
## - "previous" - switch between the current and previous screen.
## - "screen1,...,screenN" - switch between given sequence of screens.
##
## Screens available for use: help, playlist, browser, search_engine,
## media_library, playlist_editor, tag_editor, outputs, visualizer, clock.
##
#screen_switcher_mode = playlist, browser
#
##
## Note: You can define startup screen
## by choosing screen from the list above.
##
#startup_screen = playlist
#
##
## Note: You can define startup slave screen
## by choosing screen from the list above or
## an empty value for no slave screen.
##
#startup_slave_screen = ""
#
#startup_slave_screen_focus = no
#
##
## Default width of locked screen (in %).
## Acceptable values are from 20 to 80.
##
#
#locked_screen_width_part = 50
#
#ask_for_locked_screen_width_part = yes
#
#jump_to_now_playing_song_at_start = yes
#
ask_before_clearing_playlists = yes
#
#clock_display_seconds = no
#

display_volume_level = "yes"

display_bitrate = "no"

##
## Note: You can choose default search mode for search
## engine. Available modes are:
##
## - 1 - use mpd built-in searching (no regexes, pattern matching)
## - 2 - use ncmpcpp searching (pattern matching with support for regexes,
##       but if your mpd is on a remote machine, downloading big database
##       to process it can take a while
## - 3 - match only exact values (this mode uses mpd function for searching
##       in database and local one for searching in current playlist)
##
#
search_engine_default_search_mode = 2

external_editor = "/usr/bin/vim"

## Note: set to yes if external editor is a console application.
##
use_console_editor = yes

 follow_now_playing_lyrics = "yes"  

 display_screens_numbers_on_start = "yes"  

 lyrics_database = "1"  

default_place_to_search_in = "database"

lyrics_fetchers = azlyrics, genius, sing365,  metrolyrics, justsomelyrics, jahlyrics, plyrics, tekstowo, internet

## Navigation ##
cyclic_scrolling = "yes"
jump_to_now_playing_song_at_start = "yes"
lines_scrolled = "2"
#fancy_scrolling = "yes"  

## Other ##
regular_expressions = "extended"

#progressbar_boldness = "yes"
#progressbar_elapsed_color = "white"

##### colors definitions #####
colors_enabled = yes 
empty_tag_color = black
header_window_color = white
volume_color = black
state_line_color = red
state_flags_color = black
main_window_color = cyan
color1 = red
color2 = magenta 
progressbar_color = cyan
progressbar_elapsed_color = red 
statusbar_color = green
alternative_ui_separator_color = black
window_border_color = black
active_window_border = green

# enable_window_title = "no"
follow_now_playing_lyrics = "yes"
ignore_leading_the = "yes"
empty_tag_marker = ""

